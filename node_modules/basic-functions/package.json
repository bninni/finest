{
  "name": "basic-functions",
  "version": "1.0.5",
  "description": "Collection of functions that return specific values (noop, true, false, echo, etc)",
  "main": "index.js",
  "scripts": {
    "test": "vows test/test.js --spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bninni/basic-functions.git"
  },
  "keywords": [
    "basic",
    "functions",
    "standard",
    "functions",
    "base",
    "functions",
    "return",
    "noop",
    "echo",
    "true",
    "false",
    "throw"
  ],
  "devDependencies": {
    "vows": "~0.8.1"
  },
  "author": {
    "name": "Brian Ninni",
    "email": "brian@ninni.io",
    "url": "http://ninni.io"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bninni/basic-functions/issues"
  },
  "homepage": "https://github.com/bninni/basic-functions#readme",
  "readme": "# basic-functions\r\n[![Build Status](https://travis-ci.org/bninni/basic-functions.svg?branch=master)](https://travis-ci.org/bninni/basic-functions)\r\n\r\nA Simple module which contains common functions to save you time, code, and memory\r\n\r\n## Install\r\n```\r\nnpm install basic-functions\r\n```\r\nor\r\n```\r\nnpm install -g basic-functions\r\n```\r\n\r\nThen import the module into your program:\r\n\r\n```javascript\r\nvar baseFns = require('basic-functions')\r\n```\r\n\r\nAn simply reference the stored functions\r\n\r\n## Default Values\r\n\r\n```javascript\r\nbaseFns.undefined() //undefined\r\n\r\nbaseFns.null()      //null\r\n\r\nbaseFns.true()      //true\r\n//or baseFns.True()\r\n\r\nbaseFns.false()     //false\r\n//or baseFns.False()\r\n\r\nbaseFns.zero()      //0\r\n//or baseFns[0], baseFns['0'], baseFns.Zero\r\n\r\nbaseFns.one()       //1\r\n//or baseFns[1], baseFns['1'], baseFns.One\r\n\r\nbaseFns.NaN()       //NaN\r\n//or baseFns.nan()\r\n\r\nbaseFns.Infinity()  //Infinity\r\n//or baseFns.infinity()\r\n\r\nbaseFns._Infinity() //-Infinity\r\n//or baseFns._infinity()\r\n\r\nbaseFns.Array()     //[]\r\n//or baseFns.array()\r\n\r\nbaseFns.Object()    //{}\r\n//or baseFns.object()\r\n\r\nbaseFns.String()    //{}\r\n//or baseFns.string()\r\n\r\nbaseFns.Function()  //function(){}\r\n//or baseFns.function()\r\n\r\nbaseFns.this()      //this\r\n\r\n//more detailed example of how 'this' can be used\r\nvar obj = {},\r\n  f = baseFns.this.bind( obj );\r\n\r\nf() === obj; //true\r\n```\r\n<a name=\"handlers\"></a>\r\n## Handlers\r\n\r\n  * [Empty Handler](#empty)\r\n  * [Calling a Function](#call)\r\n  * [Instantiating a Constructor](#instantiate)\r\n  * [Throwing an Error](#throw)\r\n  * [Echoing a Value](#echo)\r\n\r\n<a name=\"empty\"></a>\r\n### Empty Handler\r\n\r\n[Back to Top](#handlers)\r\n\r\n* **noop**\r\n* **noOp**\r\n  \r\n*Does nothing*\r\n\r\n```javascript\r\nvar fn = baseFns.noop;\r\n//or baseFns.noOp\r\n\r\nfn() //undefined\r\n```\r\n\r\n<a name=\"call\"></a>\r\n### Calling a Function\r\n\r\n[Back to Top](#handlers)\r\n\r\n* **call**\r\n* **run**\r\n\r\n*Returns the result of invoking the first input argument*\r\n  * *Only if the input argument is a* `Function`\r\n  \r\n```javascript\r\nvar fn = baseFns.call;\r\n//or baseFns.run\r\n\r\nfunction arrFn(){\r\n  return ['a','b','c'];\r\n}\r\n\r\nfn( arrFn ) //['a','b','c']\r\n```\r\n\r\n* **call.with( _args_ )**\r\n \r\n*Returns the result of invoking the first input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.with( 5, 10 );\r\n//or baseFns.run.with( 5, 10 )\r\n\r\nfunction add( a, b ){\r\n  return a + b;\r\n}\r\n\r\nfunction multiply( a, b ){\r\n  return a * b;\r\n}\r\n\r\nfn( add )      //15\r\nfn( multiply ) //50\r\n```\r\n\r\n* **call.fn( _fn_ )**\r\n \r\n*Returns the result of invoking* `fn` *with the input arguments as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.fn( add );\r\n//or baseFns.run.fn( add )\r\n\r\nfn( 5, 10 ) //15\r\n```\r\n\r\n* **call.fn( _fn_ ).with( _args_ )**\r\n \r\n*Returns the result of invoking* `fn` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.fn( add ).with( 5, 10 );\r\n//or baseFns.run.fn( add ).with( 5, 10 )\r\n\r\nfn()          //15\r\nfn( 25, 100 ) //15\r\n```\r\n\r\n* **call.firstFn**\r\n \r\n*Returns the result of invoking the first input argument that is a* `Function`\r\n\r\n```javascript\r\nvar fn = baseFns.call.firstFn;\r\n//or baseFns.run.firstFn\r\n\r\nfunction numFn(){\r\n  return 10;\r\n}\r\n\r\nfunction strFn(){\r\n  return 'hi';\r\n}\r\n\r\nfn( false, numFn, strFn ) //10\r\n```\r\n\r\n* **call.firstFn.with( _args_ )**\r\n \r\n*Returns the result of invoking the first input argument that is a* `Function` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.firstFn.with( 5, 10 );\r\n//or baseFns.run.firstFn.with( 5, 10 )\r\n\r\nfn( [], add, multiply )     //15\r\n```\r\n\r\n* **call.nth( _n_ )**\r\n \r\n*Returns the result of invoking the* `nth` *input argument*\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.call.nth(1);\r\n//or baseFns.run.nth(1)\r\n\r\nfn( false, numFn, strFn ) //10\r\n```\r\n\r\n* **call.nth( _n_ ).with( _args_ )**\r\n \r\n*Returns the result of invoking the* `nth` *input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.nth(1).with( 5, 10 );\r\n//or baseFns.run.nth(1).with( 5, 10 )\r\n\r\nfn( [], add, multiply ) //15\r\n```\r\n\r\n* **call.nth( _n_ ).fn**\r\n \r\n*Returns the result of invoking the* `nth` *input argument that is a* `Function`\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.call.nth(1).fn;\r\n//or baseFns.run.nth(1).fn\r\n\r\nfn( false, numFn, strFn ) //'hi'\r\n```\r\n\r\n* **call.nth( _n_ ).fn.with( _args_ )**\r\n \r\n*Returns the result of invoking the* `nth` *input argument that is a* `Function` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.nth(1).fn.with( 5, 10 );\r\n//or baseFns.run.nth(1).fn.with( 5, 10 )\r\n\r\nfn( [], add, multiply ) //50\r\n```\r\n\r\n* **call.key( _key_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the first input argument*\r\n\r\n```javascript\r\nvar numObj = {\r\n    fn : numFn\r\n  },\r\n  strObj = {\r\n    fn : strFn\r\n  },\r\n  fn = baseFns.call.key('fn');\r\n  //or baseFns.run.key('fn')\r\n\r\nfn( numObj ) //10\r\nfn( strObj ) //'hi'\r\n```\r\n\r\n* **call.key( _key_ ).with( _args_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the first input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar multObj = {\r\n    fn : multiply\r\n  },\r\n  addObj = {\r\n    fn : add\r\n  },\r\n  fn = baseFns.call.key('fn').with( 5, 10 );\r\n  //or baseFns.run.key('fn').with( 5, 10 )\r\n\r\nfn( multObj ) //50\r\nfn( addObj )  //15\r\n```\r\n\r\n* **call.key( _key_ ).inThis**\r\n \r\n*Returns the result of invoking the property* `key` *in* `this` *with the input arguments as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.key('fn').inThis.bind( addObj );\r\n//or baseFns.run.key('fn').inThis.bind( addObj )\r\n\r\nfn( 5, 10 ) //15\r\n```\r\n\r\n* **call.key( _key_ ).inThis.with( _args_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in* `this` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.key('fn').inThis.with( 5, 10 );\r\n//or baseFns.run.key('fn').inThis.with( 5, 10 ).bind( addObj )\r\n\r\nfn()          //15\r\nfn( 25, 100 ) //15\r\n```\r\n\r\n* **call.key( _key_ ).inNth( _n_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the* `nth` *input argument*\r\n\r\n```javascript\r\nvar fn = baseFns.call.key('fn').inNth(1);\r\n//or baseFns.run.key('fn').inNth(1)\r\n\r\nfn( false, numObj, strObj ) //10\r\n```\r\n\r\n* **call.key( _key_ ).inNth( _n_ ).with( _args_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the* `nth` *input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.call.key('fn').inNth(1).with( 5, 10 );\r\n//or baseFns.run.key('fn').inNth(1).with( 5, 10 )\r\n\r\nfn( [], addObj, multObj ) //15\r\n```\r\n\r\n* **call.key( _key_ ).inNth( _n_ ).ofType( _type_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the* `nth` *input argument of type* `type`\r\n\r\n```javascript\r\nvar fn = baseFns.call.key('fn').inNth(1).ofType( Object );\r\n//or baseFns.run.key('fn').inNth(1).ofType( Object )\r\n\r\nfn( false, numObj, strObj ) //'hi'\r\n```\r\n\r\n* **call.key( _key_ ).inNth( _n_ ).ofType( _type_ ).with( _args_ )**\r\n \r\n*Returns the result of invoking the property* `key` *in the* `nth` *input argument of type* `type` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\n//can also use strings for the type\r\nvar fn = baseFns.call.key('fn').inNth(1).ofType( 'object' ).with( 5, 10 );\r\n//or baseFns.run.key('fn').inNth(1).ofType( 'object' ).with( 5, 10 )\r\n\r\nfn( [], addObj, multObj ) //50\r\n```\r\n\r\n<a name=\"instantiate\"></a>\r\n### Instantiating a Constructor\r\n\r\n[Back to Top](#handlers)\r\n\r\n* **instantiate**\r\n* **new**\r\n\r\n*Returns a* `new` *instance of the first input argument*\r\n  * *Only if the input argument is a* `Function`\r\n  \r\n```javascript\r\nvar fn = baseFns.instantiate;\r\n//or baseFns.new\r\n\r\nfn( Array ) //[]\r\n```\r\n\r\n* **instantiate.with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the first input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.with( 'abc' );\r\n//or baseFns.new.with( 'abc' )\r\n\r\nfn( Array )   //['abc']\r\n```\r\n\r\n* **instantiate.fn( _fn_ )**\r\n \r\n*Returns a* `new` *instance of* `fn` *with the input arguments as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.fn( Array );\r\n//or baseFns.new.fn( Array )\r\n\r\nfn( 5 ) //[5]\r\n```\r\n\r\n* **instantiate.fn( _fn_ ).with( _args_ )**\r\n \r\n*Returns a* `new` *instance of* `fn` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.fn( Array ).with( 5, 10 );\r\n//or baseFns.new.fn( Array ).with( 5, 10 )\r\n\r\nfn()          //[5, 10]\r\nfn( 25, 100 ) //[5, 10]\r\n```\r\n\r\n* **instantiate.firstFn**\r\n \r\n*Returns a* `new` *instance of the first input argument that is a* `Function`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.firstFn;\r\n//or baseFns.new.firstFn\r\n\r\nfn( 100, Array, String ) //[]\r\n```\r\n\r\n* **instantiate.firstFn.with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the first input argument that is a* `Function` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.firstFn.with( true );\r\n//or baseFns.new.firstFn.with( true )\r\n\r\nfn( 100, Array, String ) //[ true ]\r\n```\r\n\r\n* **instantiate.nth( _n_ )**\r\n \r\n*Returns a* `new` *instance of the* `nth` *input argument*\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.nth(1);\r\n//or baseFns.new.nth(1)\r\n\r\nfn( 100, Array, String ) //[]\r\n```\r\n\r\n* **instantiate.nth( _n_ ).with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the* `nth` *input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.nth(1).with( true );\r\n//or baseFns.new.nth(1).with( true )\r\n\r\nfn( 100, Array, String ) //[ true ]\r\n```\r\n\r\n* **instantiate.nth( _n_ ).fn**\r\n \r\n*Returns a* `new` *instance of the* `nth` *input argument that is a* `Function`\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.nth(1).fn;\r\n//or baseFns.new.nth(1).fn\r\n\r\nfn( 100, Array, String ) //''\r\n```\r\n\r\n* **instantiate.nth( _n_ ).fn.with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the* `nth` *input argument that is a* `Function` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.nth(1).fn.with( true );\r\n//or baseFns.new.nth(1).fn.with( true )\r\n\r\nfn( 100, Array, String ) //'true'\r\n```\r\n\r\n* **instantiate.key( _key_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the first input argument*\r\n\r\n```javascript\r\nvar arrObj = {\r\n    fn : Array\r\n  },\r\n  strObj = {\r\n    fn : String\r\n  },\r\n  fn = baseFns.instantiate.key('fn');\r\n  //or baseFns.new.key('fn')\r\n\r\nfn( arrObj ) //[]\r\nfn( strObj ) //''\r\n```\r\n\r\n* **instantiate.key( _key_ ).with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the first input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').with( true );\r\n//or baseFns.new.key('fn').with( true )\r\n\r\nfn( arrObj ) //[ true ]\r\n```\r\n\r\n* **instantiate.key( _key_ ).inThis**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in* `this` *with the input arguments as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inThis.bind( arrObj );\r\n//or baseFns.new.key('fn').inThis.bind( arrObj )\r\n\r\nfn()       //[]\r\nfn( 'hi' ) //[ 'hi' ]\r\n```\r\n\r\n* **instantiate.key( _key_ ).inThis.with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in* `this` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inThis.with( true ).bind( arrObj );\r\n//or baseFns.new.key('fn').inThis.with( true ).bind( arrObj )\r\n\r\nfn()       //[ true ]\r\nfn( 'hi' ) //[ true ]\r\n```\r\n\r\n* **instantiate.key( _key_ ).inNth( _n_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the* `nth` *input argument*\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inNth(1);\r\n//or baseFns.new.key('fn').inNth(1)\r\n\r\nfn( 100, arrObj, strObj ) //[]\r\n```\r\n\r\n* **instantiate.key( _key_ ).inNth( _n_ ).with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the* `nth` *input argument with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inNth(1).with( true );\r\n//or baseFns.new.key('fn').inNth(1).with( true )\r\n\r\nfn( 100, arrObj, strObj ) //[ true ]\r\n```\r\n\r\n* **instantiate.key( _key_ ).inNth( _n_ ).ofType( _type_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the* `nth` *input argument of type* `type`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inNth(1).ofType( Object );\r\n//or baseFns.new.key('fn').inNth(1).ofType( Object )\r\n\r\nfn( 100, arrObj, strObj ) //''\r\n```\r\n\r\n* **instantiate.key( _key_ ).inNth( _n_ ).ofType( _type_ ).with( _args_ )**\r\n \r\n*Returns a* `new` *instance of the property* `key` *in the* `nth` *input argument of type* `type` *with* `args` *as the* `arguments`\r\n\r\n```javascript\r\nvar fn = baseFns.instantiate.key('fn').inNth(1).ofType( 'object' ).with( true );\r\n//or baseFns.new.key('fn').inNth(1).ofType( 'object' ).with( true );\r\n\r\nfn( 100, arrObj, strObj ) //'true'\r\n```\r\n\r\n<a name=\"throw\"></a>\r\n### Throwing an Error\r\n\r\n[Back to Top](#handlers)\r\n\r\n* **throw**\r\n* **error**\r\n\r\n*Throws the first input argument*\r\n  \r\n```javascript\r\nvar fn = baseFns.throw;\r\n//or baseFns.error\r\n\r\nfn( new Error ) //throws Error\r\n```\r\n\r\n* **throw.error( _err_ )**\r\n \r\n*Throws* `fn`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.error( new TypeError );\r\n//or baseFns.error.error( new TypeError )\r\n\r\nfn() //throws TypeError\r\n```\r\n\r\n* **throw.firstError**\r\n \r\n*Throws the first input argument that is an* `instanceof Error`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.firstError;\r\n//or baseFns.error.firstError\r\n\r\nfn( {}, new Error, new TypeError ) //throws Error\r\n```\r\n\r\n* **throw.nth( _n_ )**\r\n \r\n*Throws the* `nth` *input argument*\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.nth(1);\r\n//or baseFns.error.nth(1)\r\n\r\nfn( {}, new Error, new TypeError ) //throws Error\r\n```\r\n\r\n* **throw.nth( _n_ ).error**\r\n \r\n*Throws the* `nth` *input argument that is an* `instanceof Error`\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.nth(1).error;\r\n//or baseFns.error.nth(1).error\r\n\r\nfn( {}, new Error, new TypeError ) //throws TypeError\r\n```\r\n\r\n* **throw.key( _key_ )**\r\n \r\n*Throws the property* `key` *in the first input argument*\r\n\r\n```javascript\r\nvar errObj = {\r\n    err : new Error\r\n  },\r\n  typeErrObj = {\r\n    err : new TypeError\r\n  },\r\n  fn = baseFns.throw.key('err');\r\n  //or baseFns.error.key('err')\r\n\r\nfn( errObj )     //throws Error\r\nfn( typeErrObj ) //throws TypeError\r\n```\r\n\r\n* **throw.key( _key_ ).inThis**\r\n \r\n*Throws the property* `key` *in* `this`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.key('err').inThis.bind( errObj );\r\n//or baseFns.error.key('err').inThis.bind( errObj )\r\n\r\nfn() //throws Error\r\n```\r\n\r\n* **throw.key( _key_ ).inNth( _n_ )**\r\n \r\n*Throws the property* `key` *in the* `nth` *input argument*\r\n\r\n```javascript\r\nvar fn = baseFns.throw.key('err').inNth(1);\r\n//or baseFns.error.key('err').inNth(1)\r\n\r\nfn( 'hi', errObj, typeErrObj ) //throws Error\r\n```\r\n\r\n* **throw.key( _key_ ).inNth( _n_ ).ofType( _type_ )**\r\n \r\n*Throws the property* `key` *in the* `nth` *input argument of type* `type`\r\n\r\n```javascript\r\nvar fn = baseFns.throw.key('err').inNth(1).ofType( Object );\r\n//or baseFns.error.key('err').inNth(1).ofType( Object )\r\n\r\nfn( 'hi', errObj, typeErrObj ) //throws TypeError\r\n```\r\n\r\n<a name=\"echo\"></a>\r\n### Echoing a Value\r\n\r\n[Back to Top](#handlers)\r\n\r\n* **echo**\r\n* **return**\r\n\r\n*Returns the first input argument*\r\n  \r\n```javascript\r\nvar fn = baseFns.echo;\r\n//or baseFns.return\r\n\r\nfn( 10 ) //10\r\n```\r\n\r\n* **echo.value( _v_ )**\r\n \r\n*Returns* `v`\r\n\r\n```javascript\r\nvar fn = baseFns.echo.value( 10 );\r\n//or baseFns.return.value( 10 )\r\n\r\nfn()       //10\r\nfn( true ) //10\r\n```\r\n\r\n* **echo.nth( _n_ )**\r\n \r\n*Returns the* `nth` *input argument*\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.echo.nth(1);\r\n//or baseFns.return.nth(1)\r\n\r\nfn( 'hi', 100, 'there' ) //100\r\n```\r\n\r\n* **echo.nth( _n_ ).ofType( _type_ )**\r\n \r\n*Returns the* `nth` *input argument of type* `type`\r\n\r\n*Note: Index starts at* `0`\r\n\r\n```javascript\r\nvar fn = baseFns.echo.nth(1).ofType('string');\r\n//or baseFns.return.nth(1).ofType('string')\r\n\r\nfn( 'hi', 100, 'there' ) //'there'\r\n```\r\n\r\n* **echo.key( _key_ )**\r\n \r\n*Returns the property* `key` *in the first input argument*\r\n\r\n```javascript\r\nvar obj = {\r\n    str : 'hi',\r\n    num : 100\r\n  },\r\n  fn = baseFns.echo.key('str');\r\n  //or baseFns.return.key('str')\r\n\r\nfn( obj ) //'hi'\r\n```\r\n\r\n* **echo.key( _key_ ).inThis**\r\n \r\n*Returns the property* `key` *in* `this`\r\n\r\n```javascript\r\nvar fn = baseFns.echo.key('str').inThis.bind( obj );\r\n//or baseFns.return.key('str').inThis.bind( obj )\r\n\r\nfn() //'hi'\r\n```\r\n\r\n* **echo.key( _key_ ).inNth( _n_ )**\r\n \r\n*Returns the property* `key` *in the* `nth` *input argument*\r\n\r\n```javascript\r\nvar fn = baseFns.echo.key('num').inNth(1);\r\n//or baseFns.return.key('num').inNth(1)\r\n\r\nfn( 'hi', obj ) //100\r\n```\r\n\r\n* **echo.key( _key_ ).inNth( _n_ ).ofType( _type_ )**\r\n \r\n*Returns the property* `key` *in the* `nth` *input argument of type* `type`\r\n\r\n```javascript\r\nvar fn = baseFns.echo.key('str').inNth(1).ofType( Object );\r\n//or baseFns.return.key('str').inNth(1).ofType( Object )\r\n\r\nfn( 'hi', {}, obj ) //'hi'\r\n```",
  "readmeFilename": "README.md",
  "gitHead": "4b96d4c14f39153ae03487f6d65fba83ce5a14b8",
  "_id": "basic-functions@1.0.5",
  "_shasum": "b8b45628c05beeca4b6985bb9d6eb84648524425",
  "_from": "basic-functions@1.0.5"
}
